name: Tahoe builder 02-10 (latest) Recovery Image

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Clone gibMacOS
        run: |
          git clone https://github.com/corpnewt/gibMacOS.git

      - name: Download macOS Installer (latest beta)
        run: |
          python ./gibMacOS/gibMacOS.py -c release -v Tahoe -m 26 -o /tmp/Tahoe-stable-latest

      - name: Install the assistant
        run: |
          sudo installer -pkg /tmp/Tahoe-beta-latest/InstallAssistant.pkg -target /

      - name: Generate macOS Installer
        run: |
          INSTALLER=$(ls -d /Applications/Install*.app | head -n 1 || true)
          if [ ! -d "$INSTALLER" ]; then
            echo "Could not find Install macOS app in /Applications"
            ls -l /Applications
            exit 1
          fi
          SIZE_MB=$(du -sm "$INSTALLER" | cut -f1)

          # Add 40% headroom and ceil
          EXTRA=$(echo "($SIZE_MB * 0.4 + 0.999)/1" | bc)

          TOTAL_MB=$(( SIZE_MB + EXTRA ))

          echo "Installer size: $SIZE_MB MB"
          echo "Allocating DMG size: $TOTAL_MB MB"

          sudo hdiutil create -o /tmp/Tahoe -size ${TOTAL_MB}m -volname 'Tahoe' -layout SPUD -fs HFS+J
          sudo hdiutil attach /tmp/Tahoe.dmg -noverify -mountpoint /Volumes/Tahoe
          sleep 10
          sudo "$INSTALLER/Contents/Resources/createinstallmedia" --volume /Volumes/Tahoe --nointeraction

          # Detect created installer volume (it always starts with "Install")
          INSTALL_VOL=$(ls -d /Volumes/Install* | head -n 1 || true)
          if [ ! -d "$INSTALL_VOL" ]; then
            echo "Could not find installer volume in /Volumes"
            ls -l /Volumes
            exit 1
          fi
          echo "Found installer volume: $INSTALL_VOL"

          cp -R "$INSTALL_VOL/BaseSystem" /tmp/BaseSystem

     
          #Upload to GoFile.io
        run: |
          # 1. Ustal serwer
          SERVER=$(curl -s https://api.gofile.io/getServer | jq -r '.data.server')
          if [ -z "$SERVER" ]; then
            echo "Nie udało się uzyskać serwera z Gofile.io"
            exit 1
          fi
          echo "Używam serwera: $SERVER"

          #Wgraj pliki (wszystkie z katalogu BaseSystem)
          for FILE in /tmp/BaseSystem/*; do
            echo "Wysyłam $FILE..."
            curl -s -X POST "https://$SERVER.gofile.io/uploadFile" \
              -F "file=@$FILE" \
              -F "folderId=" \
              -F "description=Uploaded from GitHub Action" \
              -F "token=" > /tmp/upload_response.json

            cat /tmp/upload_response.json
            URL=$(jq -r '.data.downloadPage' /tmp/upload_response.json)
            echo "Plik dostępny pod: $URL"
          done
